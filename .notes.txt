------ Node.js + Express + MongoDb docs tutorial ------
https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/skeleton_website

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Express.js, or simply    Express   ,                -->  is   a back end web application framework   for building   RESTful APIs   with   Node.js  ,
                                                         released as free and open-source software under the MIT License.
                                                         It is designed for building   web applications   and   APIs

Node.js                                             -->  is a cross-platform, open-source   JavaScript runtime environment   that can run on Windows, Linux, Unix, macOS, and more
                                                         Node.js runs on the   V8 JavaScript engine  (Chrome browser engine), and executes JavaScript code outside a web browser.

MongoDb                                             --> is a source-available, cross-platform,   document-oriented database program  . Classified as a   NoSQL database   product,
                                                        MongoDB uses JSON-like documents with optional schemas.              

   |->  Mongoose     -->   is a MongoDB object modeling tool (ORM/ODM - Object Relational Mapper/Object Document Mapper tool) designed to work in an asynchronous environment. 
                           Mongoose provides a straight-forward, schema-based solution to model your application data.
                           It includes built-in type casting, validation, query building, business logic hooks and more, out of the box.


------ Creating a skeleton website --------------------------------------------------------------------------------------------------------------------------------------------------------

npm install express-generator -g                    --> install the generator tool site-wide using the npm package manager

express express-locallibrary-tutorial --view=pug    --> command for generating project files using Express Application Generator, using the Pug template library and no CSS engine

The generator-created files define all variables as   var  .
Open all of the generated files and change the var declarations to   const   before you continue.

--

cd express-locallibrary-tutorial    --> go to newly created directory

npm install     --> install all of the dependencies, the install command will   fetch   all the dependency   packages   listed in the project's   package.json   file

DEBUG=express-locallibrary-tutorial:* npm start     --> run the application with   debug mode
npm start --> run the application

--

npm install --save-dev nodemon    --> Nodemon tool enables server restart on file changes, install as a developer dependency (and globaly: npm install -g nodemon)
Now if you edit any file in the project the server will restart (or you can restart it by typing   rs   on the command prompt at any time).
You will still need to   reload the browser    to refresh the page.


"scripts": {
    "start": "node ./bin/www",
    "devstart": "nodemon ./bin/www",
    "serverstart": "DEBUG=express-locallibrary-tutorial:* npm run devstart"
  },

We now have to call    npm run <script-name>    rather than just   npm start  , because "start" is actually an npm command that is mapped to the named script. 

--

The dependencies include the express package and the package for our selected view engine (pug). In addition, we have the following packages that are useful in many web applications:

cookie-parser: Used to parse the cookie header and populate req.cookies (essentially provides a convenient method for accessing cookie information).
debug: A tiny node debugging utility modeled after node core's debugging technique.
morgan: An HTTP request logger middleware for node.
http-errors: Create HTTP errors where needed (for express error handling).

--

run    npm install   after any changes in    package.json   !


Usually library updates to the minor and patch version remain compatible. 
We've prefixed each version with   ^   above so that we can automatically update to the latest minor.patch version by running:

npm update --save

Major versions change the compatibility. 
For those updates we'll need to   manually   update the   package.json   and   code   that uses the library, and extensively   re-test the project  .


--- Using a Database ( with MongoDB / Mongoose ) -------------------------------------------------------------------------------------------------------------------------------------------

Object Relational Mapper ("ORM") and Object Document Mapper ("ODM") - These represent the website's data as JavaScript objects, which are then mapped to the underlying database. 

Mongoose --> ODM

A "collection" of "documents" in a MongoDB database is analogous to a "table" of "rows" in a relational database.

The rest of this tutorial shows    how to   define and access   the Mongoose   schema and models   for the LocalLibrary website example.

--- Designing the LocalLibrary models  --> UML

--- Mongoose primer ---

This section provides an overview of   how to connect Mongoose to a MongoDB database  ,    how to define a schema and a model   , and    how to make basic queries  .

-- Installing Mongoose and MongoDB

   npm install mongoose

-- Connecting to MongoDB (locally hosted database)

// Import the mongoose module
const mongoose = require("mongoose");

// Set `strictQuery: false` to globally opt into filtering by properties that aren't in the schema
// Included because it removes preparatory warnings for Mongoose 7.
// See: https://mongoosejs.com/docs/migrating_to_6.html#strictquery-is-removed-and-replaced-by-strict
mongoose.set("strictQuery", false);

// Define the database URL to connect to.
const mongoDB = "mongodb://127.0.0.1/my_database";

// Wait for database to connect, logging an error if there is a problem
main().catch((err) => console.log(err));
async function main() {
  await mongoose.connect(mongoDB);
}

-- Defining and creating models

Models are defined using the   Schema   interface. The Schema allows you to   define the fields   stored in each document along with their validation requirements and default values

In addition, you can   define static and instance helper methods   to make it easier to work with your data types,
and also   virtual properties   that you can use like any other field, but which aren't actually stored in the database (we'll discuss a bit further below).

Schemas are then   "compiled" into models   using the   mongoose.model()   method.

Once you have    a model   you can   use it   to   find  , create  , update  , and   delete   objects   of the given type.

-- Defining schemas

The code fragment below shows how you might   define a simple schema  .
First you   require()   mongoose, then    use the Schema constructor   to create   a new schema instance  , defining the various fields inside it in the constructor's object parameter.

// Require Mongoose
const mongoose = require("mongoose");

// Define a schema
const Schema = mongoose.Schema;

const SomeModelSchema = new Schema({
  a_string: String,
  a_date: Date,
});

-- Creating a model

  Models   are created from schemas using the   mongoose.model()   method:

  // Define schema
const Schema = mongoose.Schema;

const SomeModelSchema = new Schema({
  a_string: String,
  a_date: Date,
});

// Compile model from schema
const SomeModel = mongoose.model("SomeModel", SomeModelSchema);

The first argument is the singular name of the collection that will be created for your model (Mongoose will create the database collection for the model SomeModel above),
and the second argument is the schema you want to use in creating the model.

 Once you've defined your model classes you can use them to create, update, or delete records, and run queries to get all records or particular subsets of records.

 -- Schema types (fields)

 A schema can have an arbitrary number of   fields   â€” each one represents a field in the documents stored in MongoDB.
 An example schema showing many of the common   field types   and how they are declared is shown below.

 const schema = new Schema({
  name: String,
  binary: Buffer,
  living: Boolean,
  updated: { type: Date, default: Date.now() },
  age: { type: Number, min: 18, max: 65, required: true },
  mixed: Schema.Types.Mixed,
  _someId: Schema.Types.ObjectId,
  array: [],
  ofString: [String], // You can also have an array of each of the other types too.
  nested: { stuff: { type: String, lowercase: true, trim: true } },
});

Most of the   SchemaTypes   (the descriptors after "type:" or after field names) are self-explanatory.
The exceptions are:
    ObjectId:    Represents specific instances of a model in the database. For example, a book might use this to represent its author object.
                 This will actually contain the    unique ID (_id)   for the specified object. We can use the populate() method to pull in the associated information when needed.
    Mixed:       An arbitrary schema type.
    []:          An array of items. You can perform JavaScript array operations on these models (push, pop, unshift, etc.).
                 The examples above show an array of objects without a specified type and an array of String objects, but you can have an array of any type of object.

The code also shows both ways of declaring a field:

- Field   name   and   type   as    a key-value pair    (i.e. as done with fields name, binary and living).

- Field   name   followed by   an object   defining the   type  , and   any other options   for the field.
  Options include things like:
   - default values.
   - built-in validators (e.g. max/min values) and custom validation functions.
   - Whether the field is required
   - Whether String fields should automatically be set to lowercase, uppercase, or trimmed (e.g. { type: String, lowercase: true, trim: true })

More on SchemaTypes:    https://mongoosejs.com/docs/schematypes.html      https://mongoosejs.com/docs/typescript.html    https://mongoosejs.com/docs/typescript/schemas.html

-- Validation

Mongoose provides built-in and custom validators, and synchronous and asynchronous validators.
It allows you to specify both the acceptable range of values and the error message for validation failure in all cases.

The built-in validators include:

- All SchemaTypes have the built-in   required   validator. This is used to specify whether the field must be supplied in order to save a document.
-   Numbers   have   min   and   max   validators.
-   Strings   have:
  - enum: specifies the set of allowed values for the field.
  - match: specifies a regular expression that the string must match.
  - maxLength and minLength for the string.

The example below (slightly modified from the Mongoose documents) shows how you can specify some of the validator types and error messages:

const breakfastSchema = new Schema({
  eggs: {
    type: Number,
    min: [6, "Too few eggs"],
    max: 12,
    required: [true, "Why no eggs?"],
  },
  drink: {
    type: String,
    enum: ["Coffee", "Tea", "Water"],
  },
});

-- Virtual properties
   Virtual properties    are document properties that you can   get   and   set   but that   do not get persisted to MongoDB.

   The   getters   are useful for formatting or combining fields, while   setters   are useful for de-composing a single value into multiple values for storage.
   The example in the documentation constructs (and deconstructs) a   full name   virtual property from a   first   and   last name   field,
   which is easier and cleaner than constructing a full name every time one is used in a template.

    We will use a virtual property in the library to define a unique URL for each model record using a path and the record's _id value.

-- Methods and query helpers
  A schema can also have   instance methods  ,   static methods  , and   query helpers  .
  
  The   instance   and   static   methods are similar, but with the obvious difference that

  an instance method   is associated with a particular record   and   has access to the current object  .
  
  Query helpers   allow you to   extend mongoose's chainable query builder API   
  (for example, allowing you to add a query "byName" in addition to the find(), findOne() and findById() methods).

-- Using models
  Once you've created   a schema   you can use it to create   models  .
  
  The   model   represents  -->  a collection of documents in the database   that you can search,
  
  while the    model's instances    represent  -->  individual documents   that you can save and retrieve.

  Creation, update, deletion and querying of records are   asynchronous operations   that return a   promise  .
  The examples below show just the use of the relevant methods and   await   (i.e. the essential code for using the methods).
  The surrounding   async   function and   try...catch   block to catch errors are omitted for clarity. !!!

-- Creating and modifying documents
To create a record you can define an instance of the model and then call   save()   on it.
The examples below assume   SomeModel   is a model (with a single field   name  ) that we have created from our schema.

--
// Define schema
const Schema = mongoose.Schema;

const SomeModelSchema = new Schema({
  a_string: String,
  a_date: Date,
});

// Compile model from schema
const SomeModel = mongoose.model("SomeModel", SomeModelSchema);


// Create an instance of model SomeModel
const awesome_instance = new SomeModel({ name: "awesome" });

// Save the new model instance asynchronously
await awesome_instance.save();


You can also use   create()   to define the model instance at the same time as you save it.
Below we create just one, but you can create multiple instances by passing in an array of objects.

await SomeModel.create({ name: "also_awesome" });
--

Every model has an associated connection (this will be the default connection when you use mongoose.model()).
You create a new connection and call   .model()   on it to create the documents on a different database.

You can access the fields in this new record using the dot syntax, and change the values.
You have to call   save()   or   update()   to store modified values back to the database.

// Access model field values using dot notation
console.log(awesome_instance.name); //should log 'also_awesome'

// Change record by modifying the fields, then calling save().
awesome_instance.name = "New cool name";
await awesome_instance.save();

-- Searching for records
You can search for records using query methods, specifying the query conditions as a JSON document.
The code fragment below shows how you might   find all athletes   in a database that   play tennis  ,   returning just the fields for athlete   name   and   age  .
Here we just specify one matching   field   (sport) but you can add more criteria, specify regular expression criteria, or remove the conditions altogether to return all athletes.

const Athlete = mongoose.model("Athlete", yourSchema);

// find all athletes who play tennis, returning the 'name' and 'age' fields
const tennisPlayers = await Athlete.find(
  { sport: "Tennis" },
  "name age",
).exec();

Query APIs  , such as   find()  , return a variable of type Query.
You can   use a query object   to build up a query in parts   before   executing it   with the   exec()  method.
  exec() executes the query and returns   a promise   that you can   await   on for the result.

Above we've defined the query conditions in the   find()   method. We can also do this using a   where()   function,
and we can    chain   all the parts of our query together using the dot operator (.) rather than adding them separately.
The code fragment below is the same as our query above, with an additional condition for the age.

Athlete.find()
  .where("sport")
  .equals("Tennis")
  .where("age")
  .gt(17)
  .lt(50) // Additional where query
  .limit(5)
  .sort({ age: -1 })
  .select("name age")
  .exec();

The   find()   method gets all matching records, but often you just want to get one match.
The following methods query for a single record:

- findById(): Finds the document with the specified id (every document has a unique id).

- findOne(): Finds a single document that matches the specified criteria.

- findByIdAndDelete(),   findByIdAndUpdate()  ,    findOneAndRemove()  ,   findOneAndUpdate()  :
  Finds a single document by id or criteria and either updates or removes it. These are useful convenience functions for updating and removing records.

There is also a   countDocuments()   method that you can   use to get the number of items that match conditions  .
This is useful if you want to   perform a count   without   actually fetching the records.

More on queries: https://mongoosejs.com/docs/queries.html


-- Working with related documents â€” population

You can create references from   one document/model instance to another   using the   ObjectId   schema field  ,
or from   one document to many   using an   array   of ObjectIds.
The field stores the id of the related model.
If you need the actual content of the associated document, you can use the   populate()   method in a query to replace the id with the actual data.

For example, the following schema defines authors and stories.
Each author can have multiple stories, which we represent as an array of ObjectId.
Each story can have a single author.
The ref property tells the schema which model can be assigned to this field.

const mongoose = require("mongoose");

const Schema = mongoose.Schema;

const authorSchema = new Schema({
  name: String,
  stories: [{ type: Schema.Types.ObjectId, ref: "Story" }],
});

const storySchema = new Schema({
  author: { type: Schema.Types.ObjectId, ref: "Author" },
  title: String,
});

const Story = mongoose.model("Story", storySchema);
const Author = mongoose.model("Author", authorSchema);


We can save our references to the related document by assigning the   _id   value.
Below we create an author, then a story, and assign the author id to our story's author field.

const bob = new Author({ name: "Bob Smith" });

await bob.save();

// Bob now exists, so lets create a story
const story = new Story({
  title: "Bob goes sledding",
  author: bob._id, // assign the _id from our author Bob. This ID is created by default!
});

await story.save();


Our story document now has an author referenced by the author document's ID.
In order to get the author information in the story results we use   populate()  , as shown below.

Story.findOne({ title: "Bob goes sledding" })
  .populate("author") // Replace the author id with actual author information in results
  .exec();

Astute readers will have noted that we added an author to our story, but we didn't do anything to add our story to our author's stories array.
How then can we get all stories by a particular author?
One way would be to add our story to the stories array, but this would result in us having two places where the information relating authors and stories needs to be maintained.

A better way is to get the _id of our author, then use find() to search for this in the author field across all stories.

Story.find({ author: bob._id }).exec();

More on populate: https://mongoosejs.com/docs/populate.html


-- One schema/model per file
While you can create schemas and models using any file structure you like, we highly recommend defining each model schema in its own module (file),
then exporting the method to create the model. This is shown below:

// File: ./models/some-model.js

// Require Mongoose
const mongoose = require("mongoose");

// Define a schema
const Schema = mongoose.Schema;

const SomeModelSchema = new Schema({
  a_string: String,
  a_date: Date,
});

// Export function to create "SomeModel" model class
module.exports = mongoose.model("SomeModel", SomeModelSchema);

You can then require and use the model immediately in other files. Below we show how you might use it to get all instances of the model.

// Create a SomeModel model just by requiring the module
const SomeModel = require("../models/some-model");

// Use the SomeModel object (model) to find all SomeModel records
const modelInstances = await SomeModel.find().exec();

--- Setting up a MongoDB database with MongDB Atlas ---

MongoDB Atlas --> cloud-hosted sandbox database


1. How to: set up new db in MongDB Atlas:   https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/mongoose
2. Install Mongoose package -->  npm install mongoose
3. Connect to MongoDB
  Open /app.js (in the root of your project) and copy the following text below where you declare the Express application object (after the line const app = express();).
  Replace the database URL string ('insert_your_database_url_here') with the location URL representing your own database (i.e. using the information from MongoDB Atlas).

  // Set up mongoose connection
const mongoose = require("mongoose");
mongoose.set("strictQuery", false);
const mongoDB = "insert_your_database_url_here";

main().catch((err) => console.log(err));
async function main() {
  await mongoose.connect(mongoDB);
}

As discussed in the Mongoose primer above, this code creates the default connection to the database and reports any errors to the console.

Note that hard-coding database credentials in source code as shown above is not recommended. !!!
We do it here because it shows the core connection code, and because during development there is no significant risk that leaking these details will expose
or corrupt sensitive information. We'll show you how to do this more safely when deploying to production!

4. Create models on seperate modules.

-- Defining the LocalLibrary Schema
Define a separate module for each model, as discussed above.
Start by creating a folder for our models in the project root (/models) and then create separate files for each of the models

/express-locallibrary-tutorial  // the project root
  /models
    author.js
    book.js
    bookinstance.js
    genre.js

5. Populate db using populatedb.js
   Run command:    node populatedb "<your MongoDB url>"

------- Routes and controllers -------------------------------------------------------------------------------------------------------------------------------------------
https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/routes

The diagram (README.md) !!! is provided as a reminder of the main flow of data and things that need to be implemented when handling an HTTP request/response


As we've already created the models, the main things we'll need to create are:

-   "Routes"   to   forward   the supported requests (  and   any information encoded in request URLs) to the appropriate   controller functions  .

-   Controller functions   to   get   the requested data from the models,  create  an HTML page displaying the data, and  return it  to the user to view in the browser.

-   Views    (templates)   used by the controllers to   render the data  .

Ultimately we might have pages to show lists and detail information for books, genres, authors and bookinstances, along with pages to create, update, and delete records

--- Routes primer

A route    is a section of Express code that associates an   HTTP verb   (GET, POST, PUT, DELETE, etc.),
a URL path/pattern  , and   a function   that is called to handle that pattern.

There are several ways to create routes. For this tutorial we're going to use the    express.Router middleware    
as it allows us to   group the route handlers for a particular part of a site together   and   access them using   a common route-prefix  .

-- Defining and using separate route modules
-- Route functions

Router functions are Express   middleware   , which means that    they must either complete (respond to) the request   or   call the next function in the chain.

-- HTTP verbs

The example routes above use the   Router.get()   method to respond to HTTP GET requests with a certain path.

The Router also provides route methods for all the other HTTP verbs, that are mostly used in exactly the same way:
post(), put(), delete(), options(), trace(), copy(), lock(), mkcol(), move(), purge(), propfind(), proppatch(),
unlock(), report(), mkactivity(), checkout(), merge(), m-search(), notify(), subscribe(), unsubscribe(), patch(), search(), and connect().


-- Route paths

The route paths define the endpoints at which requests can be made. The examples we've seen so far have just been strings,
and are used exactly as written: '/', '/about', '/book', '/any-random.path'.

Route paths can also be string patterns. String patterns use a form of regular expression syntax to define patterns of endpoints that will be matched.
The syntax is listed below (note that the hyphen (-) and the dot (.) are interpreted literally by string-based paths):

?   : The endpoint must have   0 or 1   of the   preceding character   (or group), e.g. a route path of '/ab?cd' will match endpoints acd or abcd.
+   : The endpoint must have   1 or more   of the   preceding character   (or group), e.g. a route path of '/ab+cd' will match endpoints abcd, abbcd, abbbcd, and so on.
*   : The endpoint may have   an arbitrary string   where the * character is placed. E.g. a route path of '/ab*cd' will match endpoints abcd, abXcd, abSOMErandomTEXTcd, and so on.
()  : Grouping match on a set of characters to perform another operation on, e.g. '/ab(cd)?e' will perform a ?-match on the group (cd) â€” it will match abe and abcde.

The route paths can also be JavaScript regular expressions.


-- Route parameters

Route parameters are named   URL segments   used to capture values at specific positions in the URL

The named segments   are prefixed with a colon   and then the name (E.g.,   /:your_parameter_name/  ).
The captured values are stored in the   req.params   object  using the parameter names as keys (E.g.,   req.params.your_parameter_name  ).

So for example, consider a URL encoded to contain information about users and books:         http://localhost:3000/users/34/books/8989.
We can extract this information as shown below, with the userId and bookId path parameters:

app.get("/users/:userId/books/:bookId", (req, res) => {
  // Access userId via: req.params.userId
  // Access bookId via: req.params.bookId
  res.send(req.params);
});

The names of route parameters must be made up of "word characters" (A-Z, a-z, 0-9, and _).

The URL   /book/create   will be matched by a route like   /book/:bookId   (because :bookId is a placeholder for   any   string, therefore create matches).
The   first route that matches an incoming URL   will be used, so if you want to process /book/create URLs specifically,
their route handler   must be defined   before   your   /book/:bookId  route.

Express docs on routing:    https://expressjs.com/en/starter/basic-routing.html   https://expressjs.com/en/guide/routing.html

-- Handling errors in the route functions

The route functions shown earlier all have arguments   req   and   res  , which represent the request and response, respectively.
Route functions are also called with a third argument   next  , which can be used   to pass errors   to the Express middleware chain.

-- Handling exceptions in route functions

-- Routes needed for the LocalLibrary

The URLs that we're ultimately going to need for our pages are listed below, where   object   is replaced by the name of each of our models 
(book, bookinstance, genre, author),   objects   is the plural of object, and   id   is the unique instance field (_id) that is given to each Mongoose model instance by default.

catalog/ â€” The home/index page.
catalog/<objects>/ â€” The list of all books, bookinstances, genres, or authors (e.g. /catalog/books/, /catalog/genres/, etc.)
catalog/<object>/<id> â€” The detail page for a specific book, bookinstance, genre, or author with the given _id field value (e.g. /catalog/book/584493c1f4887f06c0e67d37).
catalog/<object>/create â€” The form to create a new book, bookinstance, genre, or author (e.g. /catalog/book/create).
catalog/<object>/<id>/update â€” The form to update a specific book, bookinstance, genre, or author with the given _id field value (e.g. /catalog/book/584493c1f4887f06c0e67d37/update).
catalog/<object>/<id>/delete â€” The form to delete a specific book, bookinstance, genre, or author with the given _id field value (e.g. /catalog/book/584493c1f4887f06c0e67d37/delete).

The first home page and list pages don't encode any additional information.
While the results returned will depend on the model type and the content in the database, the queries run to get the information will always be the same
(similarly the code run for object creation will always be similar).

By contrast the other URLs are used to act on a specific document/model instanceâ€”these encode the identity of the item in the URL (shown as <id> above).
We'll use path parameters to extract the encoded information and pass it to the route handler
(and in a later article we'll use this to dynamically determine what information to get from the database).
By encoding the information in our URL we only need one route for every resource of a particular type (e.g. one route to handle the display of every single book item).

xpress allows you to construct your URLs any way you like â€” you can encode information in the body of the URL as shown above or use URL GET parameters (e.g. /book/?id=6).
Whichever approach you use, the URLs should be kept clean, logical and readable

--- Create the route-handler callback functions

Start by creating a folder for our controllers in the project root (/controllers) and then create separate controller files/modules for handling each of the models:

/express-locallibrary-tutorial  //the project root
  /controllers
    authorController.js
    bookController.js
    bookinstanceController.js
    genreController.js

The controllers will use the express-async-handler module, so before we proceed, install it into the library using npm:

npm install express-async-handler

--
express-async-handler module --> defines a wrapper function that hides the try...catch block and the code to forward the error. 


without express-async-handler module:

exports.get("/about", async function (req, res, next) {
  try {
    const successfulResult = await About.find({}).exec();
    res.render("about_view", { title: "About", list: successfulResult });
  } catch (error) {
    return next(error);
  }
});

with:

// Import the module
const asyncHandler = require("express-async-handler");

exports.get(
  "/about",
  asyncHandler(async (req, res, next) => {
    const successfulResult = await About.find({}).exec();
    res.render("about_view", { title: "About", list: successfulResult });
  }),
);

-- Create the catalog route module

The skeleton already has a ./routes folder containing routes for the index and users. Create another route file â€” catalog.js â€” inside this folder, as shown.

/express-locallibrary-tutorial //the project root
  /routes
    index.js
    users.js
    catalog.js

-- Update the index route module

-- Update app.js

 We have added our catalog module at a path '/catalog'. This is prepended to all of the paths defined in the catalog module.
 So for example, to access a list of books, the URL will be: /catalog/books/.

 --- Templates -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Displaying_data

 --- Template primer
 https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Displaying_data/Template_primer

 A   template   is   a text file defining the structure or layout of an output file  , with   placeholders   used to represent where data will be inserted when the template is rendered
 (in Express, templates are referred to as   views  ).

- Express template choices
Express can be used with many different template rendering engines. In this tutorial we use   Pug   (formerly known as   Jade  ) for our templates.

--- Working with forms
https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/forms

-- Form handling process
Form handling uses all of the same techniques that we learned for displaying information about our models: the route sends
our request to a controller function which performs any database actions required, including reading data from the models, then generates and returns an HTML page.
What makes things more complicated is that the server also needs to be able to process the data provided by the user, and redisplay the form with error information
if there are any problems.


--- A process flowchart for processing form requests ( --> README ! ).
    Starting with a request for a page containing a form (shown in green).


As shown in the diagram, the main things that form handling code needs to do are:

1. Display the default form the first time it is requested by the user.

   - The form may contain blank fields (e.g. if you're creating a new record), or it may be pre-populated with initial values
     (e.g. if you are changing a record, or have useful default initial values).
     Receive data submitted by the user, usually in an HTTP POST request.

2. Validate and sanitize the data.

3. If any data is invalid, re-display the formâ€”this time with any user populated values and error messages for the problem fields.

4. If all data is valid, perform required actions (e.g. save the data in the database, send a notification email, return the result of a search, upload a file, etc.)

5. Once all actions are complete, redirect the user to another page.


Often form handling code is implemented using a GET route for the initial display of the form
and a POST route to the same path for handling validation and processing of form data. This is the approach that will be used in this tutorial.

Express itself doesn't provide any specific support for form handling operations, but it can use middleware to process POST and GET parameters
from the form, and to validate/sanitize their values.

--- Validation and sanitization

Before the data from a form is stored it must be   validated   and   sanitized  :

  Validation   checks that entered values are appropriate for each field (are in the right range, format, etc.)
               and that values have been supplied for all required fields.

  Sanitization    removes/replaces characters in the data that might potentially be used to send malicious content to the server.

For this tutorial, we'll be using the popular   express-validator   module  to perform both validation and sanitization of our form data.
https://express-validator.github.io/docs/#basic-guide

-- Create genre form
https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/forms/Create_genre_form

Same pattern is used in all our post controllers: we run validators (with sanitizers), then check for errors and either re-render the form with error information or save the data.

The form defines a single required field of type "text" called "name". The default value of the field depends on whether the genre variable is defined.
If called from the GET route it will be empty as this is a new form. If called from a POST route it will contain the (invalid) value originally entered by the user.

--- Deploying to production
https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/deployment

-- What is a production environment?
The production environment is the environment provided by the server computer where you will run your website for external consumption. The environment includes:

- Computer hardware on which the website runs.
- Operating system (e.g. Linux or Windows).
- Programming language runtime and framework libraries on top of which your website is written.
- Web server infrastructure, possibly including a web server, reverse proxy, load balancer, etc.
- Databases on which your website is dependent.

The server computer could be located on your premises and connected to the Internet by a fast link, but it is far more common to use a computer that is hosted "in the cloud".

This sort of remotely accessible computing/networking hardware is referred to as    Infrastructure as a Service (IaaS)   .

Other hosting providers support Express as part of a    Platform as a Service (PaaS)    offering.
When using this sort of hosting you don't need to worry about most of your production environment (servers, load balancers, etc.) 
When you're getting started, setting up your website on a PaaS system is much easier, so that is what we'll do in this tutorial.

-- Database configuration